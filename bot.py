from vk_api import VkUpload
from vk_api.utils import get_random_id
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType

from datetime import datetime, timedelta
from docs import docWriter
from multiprocessing import Process

import vk_parsing, weather, json, requests, nltk, pika, uuid
from plugins import config, system, function, gaming_func, templates, SpyGame, keyboards

from importlib import reload
# –∏–º–ø–æ—Ä—Ç—ã –∏–∑ –¥–±
from plugins.db import init_db
init_db()

def importOrReload(module_name, *names):
    import sys

    if module_name in sys.modules:
        reload(sys.modules[module_name])
    else:
        __import__(module_name, fromlist=names)
    for name in names:
        globals()[name] = getattr(sys.modules[module_name], name)

importOrReload("plugins", "languages")


vk, longpoll, longpollGroup = system.session()

# text = register(event.obj.from_id)

def vkup(image):
    upload = VkUpload(vk)
    upload_image = upload.photo_messages(photos=image)[0]
    return upload_image

def sender(peer_id, message, attachment=None,keyboard=None, template=None):
    vk.messages.send(
        peer_id=peer_id,
        message=message,
        attachment=attachment,
        random_id=get_random_id(),
        keyboard=keyboard,
        template=template
    )


def filter_text(text):
    text = [c for c in text if c in '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è- /abcdefghijklmnopqrstuvwxyz']
    text = ''.join(text)
    return text


class RpcClient(object):
    def __init__(self):
        self.connection = pika.BlockingConnection()
        self.channel = self.connection.channel()

        result = self.channel.queue_declare(queue='', exclusive=True)
        self.callback_queue = result.method.queue

        self.channel.basic_consume(
            queue=self.callback_queue,
            on_message_callback=self.on_response,
            auto_ack=True)

    def on_response(self, ch, method, props, body):
        if self.corr_id == props.correlation_id:
            self.response = body.decode()

    def call(self, n):
        self.response = None
        self.corr_id = str(uuid.uuid4())
        self.channel.basic_publish(
            exchange='',
            routing_key='VK_queue',
            properties=pika.BasicProperties(
                reply_to=self.callback_queue,
                correlation_id=self.corr_id,
            ),
            body=json.dumps(n))
        while self.response is None:
            self.connection.process_data_events()

        from urllib.parse import unquote
        answer = str(self.response)
        return answer

    def callReportTG(self, n):
        self.channel.exchange_declare(exchange='vk_report', exchange_type='fanout')
        self.channel.basic_publish(
            exchange='vk_report',
            routing_key='',
            body=str(n)
        )
        return str('–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–ø–æ—Ä—Ç. –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É.')


class User:
    def __init__(self, id, mode):
        self.id = id
        self.mode = mode


users = []


def change_lang(lang, peer_id, conversation):
    # –¢—É—Ç —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    function.setLang(user_id=peer_id,lang=lang)
    arrLang = languages.arrLang[f'{lang}']

    last_id = vk.messages.edit(
        peer_id=peer_id,
        message=(arrLang['settings-save'] if function.checkAgree(user_id=peer_id) else arrLang['conf-choose-lang']),
        conversation_message_id=conversation,
        keyboard=(keyboards.new_start(lang).get_keyboard() if function.checkAgree(user_id=peer_id) else keyboards.agreement(lang).get_keyboard())
    )








def bot():
    for event in longpoll.listen():
        if event.type == VkBotEventType.MESSAGE_NEW:
            from_id = event.object.message['from_id']  # id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
            peer_id = event.object.message['peer_id']  # peer_id –±–µ—Å–µ–¥—ã –∏–ª–∏ –õ–°, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = event.object.message['text'].lower()
            msg = event.object.message['text']
            start_msg = message

            if message=='!reload':
                importOrReload("plugins", "languages")

            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å—Ç—É–ø–∏–ª–æ
            # if message == '!start':
            if start_msg in config.hello_msg:
                base = vk_parsing.getUser(from_id)
                fullname = base[0]['first_name'] + ' ' + base[0]['last_name']
                status, situation = function.checkUser(peer_id, fullname)
                if status:
                    lang = function.checkLang(user_id=peer_id)
                    arrLang = languages.arrLang[lang]
                    if situation == 1: # –ù–æ–≤—ã–π
                        kbrd_lang = keyboards.lang()
                        sender(peer_id, arrLang['choose-lang'], keyboard=kbrd_lang.get_keyboard())
                    elif situation == 2: # –ë—ã–≤–∞–ª—ã–π
                        kbrd = keyboards.main_menu(lang)
                        sender(peer_id, arrLang['main-menu-info'], keyboard=kbrd.get_keyboard())



                # –ï—Å–ª–∏ –±–µ—Å–µ–¥–∞
                if function.checkGroup(peer_id=peer_id):
                    # if function.checkReg(peer_id=peer_id):
                    #     lang = function.checkLang(user_id=from_id)
                    #     arrLangLang = arrLang[lang]
                    #     sender(peer_id, arrLangLang['sorry-allchat'])
                    # else:
                    #     lang = 'en-GB'
                    #     arrLangLang = arrLang[lang]
                    #     sender(peer_id, arrLangLang['sorry-allchat'])
                    pass



            if message == '–ø—É–ø–∏–ø—É–ø–∏':
                sender(peer_id, '–ü–£–ü–ò–ü–ò–î–£–ü –ü–£–ü –ü–£–ü –ü–ò–î–£–ü –ü–£–ü –ü–£–ü–£–ü –ü–£–£–£–£–£–£–ü–ò–ü–£–ü–ò ü§™ü§™ü§™')

            from plugins import profiledb
            base = vk_parsing.getUser(from_id)
            fullname = base[0]['first_name'] + ' ' + base[0]['last_name']
            photo = base[0]['photo_200']
            if message in ['!reg', '!—Ä–µ–≥']:
                if profiledb.checkUser(uid=from_id) == False:

                    if profiledb.register(uid=from_id, name=fullname, status='–û–∂–∏–¥–∞–µ—Ç—Å—è'):
                        sender(peer_id, '–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
                else:
                    sender(peer_id, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')

            if message.partition(' ') in ['!edit']:
                if profiledb.editName(uid=from_id, name=fullname):
                    sender(peer_id, '–∏–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ')
                if profiledb.editPhoto(uid=from_id, photo=photo):
                    sender(peer_id, '—Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')
            if message in ['test']:
                profiledb.getData(uid=from_id)


            if message in ['!profile', '!–ø—Ä–æ—Ñ–∏–ª—å']:
                from plugins import profiledb
                if profiledb.checkUser(uid=from_id):
                    import generateProfile

                    data = profiledb.getData(uid=from_id)

                    sender(peer_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ')

                    if (generateProfile.create_image(data=data)):
                        image = "F:/Dev/Python/Projects/VKbot/data/profile.jpg"
                        upload = VkUpload(vk)
                        upload_image = upload.photo_messages(photos=image)[0]
                        att = []
                        att.append('photo{}_{}'.format(upload_image['owner_id'], upload_image['id']))
                        sender(peer_id=peer_id, message="", attachment=','.join(att))
                else:
                    sender(peer_id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')

        elif event.type == VkBotEventType.MESSAGE_EVENT:

            lang = function.checkLang(user_id=event.obj.peer_id)
            back = ''
            try:
                back = event.object.payload.get('back-menu')
                arrLang = languages.arrLang[lang]
            except:
                arrLang = languages.arrLang['en-GB']

            CALLBACK_TYPES = ('show_snackbar', 'open_link', 'open_app')
            f_toggle: bool = False

            if event.object.payload.get('type') in CALLBACK_TYPES:
                r = vk.messages.sendMessageEventAnswer(
                    event_id=event.object.event_id,
                    user_id=event.object.user_id,
                    peer_id=event.object.peer_id,
                    event_data=json.dumps(event.object.payload))

            elif event.object.payload.get('type') in ['lang_rus', 'lang_eng','lang_it','lang_am', 'lang_kz']:
                lang_choose = event.object.payload.get('type')
                lang = 'en-GB'
                if lang_choose == 'lang_rus':
                    lang = 'ru-RU'
                elif lang_choose == 'lang_it':
                    lang = 'it-IT'
                elif lang_choose == 'lang_am':
                    lang = 'hy-AM'
                elif lang_choose == 'lang_kz':
                    lang = 'kk-KZ'
                    sender(event.obj.peer_id, '¬´...–Ø –ø—Ä–æ—Å—Ç–æ —Å–æ–≤—Ä—É, —Å–∫–∞–∑–∞–ª —á—Ç–æ –∑–¥–µ—Å—å –±—ã–ª –≤—ã–±–æ—Ä...¬ª')
                elif lang_choose == 'lang_ua':
                    lang = 'uk-UA'
                change_lang(lang, event.obj.peer_id, event.obj.conversation_message_id)

            elif event.object.payload.get('type') in ['agr_yes', 'agr_no']:
                if event.object.payload.get('type') == 'agr_yes':
                    new_start = keyboards.new_start(lang)
                    function.setAgree(user_id=event.obj.peer_id, status=1)
                    last_id = vk.messages.edit(
                        peer_id=event.obj.peer_id,
                        message=arrLang['accept-agreement'],
                        conversation_message_id=event.obj.conversation_message_id,
                        keyboard=new_start.get_keyboard())

                elif event.object.payload.get('type') == 'agr_no':
                    function.setAgree(user_id=event.obj.peer_id, status=0)
                    last_id = vk.messages.edit(
                        peer_id=event.obj.peer_id,
                        message=arrLang['deny-agreement'],
                        conversation_message_id=event.obj.conversation_message_id)

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            elif event.object.payload.get('type') == 'main-menu_list':
                main_menu = keyboards.main_menu(lang)
                last_id = vk.messages.edit(
                    peer_id=event.obj.peer_id,
                    message=arrLang['main-menu-info'],
                    conversation_message_id=event.obj.conversation_message_id,
                    keyboard=main_menu.get_keyboard())

            elif event.object.payload.get('type') in ['app-menu', 'blanks', 'wifi']:
                arrLang = arrLang['app-menu']
                if event.object.payload.get('type') == 'app-menu':
                    menu_app = keyboards.app(lang, 'main-menu_list')
                    last_id = vk.messages.edit(
                        peer_id=event.obj.peer_id,
                        message=arrLang['info'],
                        conversation_message_id=event.obj.conversation_message_id,
                        keyboard=menu_app.get_keyboard()
                    )

                elif event.object.payload.get('type') == 'blanks':
                    backKbr = keyboards.backKbr(lang, 'app-menu')
                    last_id = vk.messages.edit(
                        peer_id=event.obj.peer_id,
                        message=arrLang['blanks'],
                        conversation_message_id=event.obj.conversation_message_id,
                        keyboard=backKbr.get_keyboard()
                    )
                elif event.object.payload.get('type') == 'wifi':
                    backKbr = keyboards.backKbr(lang, 'app-menu')
                    last_id = vk.messages.edit(
                        peer_id=event.obj.peer_id,
                        message=arrLang['wifi'],
                        conversation_message_id=event.obj.conversation_message_id,
                        keyboard=backKbr.get_keyboard()
                    )
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –í—É–∑–∞
            elif event.object.payload.get('type') in ['university', 'info-kubsu', 'input-kubsu', 'univ-live', 'spam', 'univ-live-struct', 'univ-live-clubs']:
                arrLang = arrLang['univ-menu']
                if event.object.payload.get('type') == 'university':
                    menu_univ = keyboards.univ(lang, 'main-menu_list')
                    last_id = vk.messages.edit(
                        peer_id=event.obj.peer_id,
                        message=arrLang['start'],
                        conversation_message_id=event.obj.conversation_message_id,
                        keyboard=menu_univ.get_keyboard()
                    )

                # –ú–µ–Ω—é –í—É–∑–∞
                elif event.object.payload.get('type') == 'info-kubsu':
                    kbrd = keyboards.backKbr(lang, 'university')
                    last_id = vk.messages.edit(
                        peer_id=event.obj.peer_id,
                        message=arrLang['info'],
                        conversation_message_id=event.obj.conversation_message_id,
                        keyboard=kbrd.get_keyboard()
                    )
                elif event.object.payload.get('type') == 'input-kubsu':
                    kbrd = keyboards.inputkubsu(lang, 'university')
                    last_id = vk.messages.edit(
                        peer_id=event.obj.peer_id,
                        message=arrLang['input'],
                        conversation_message_id=event.obj.conversation_message_id,
                        keyboard=kbrd.get_keyboard()
                    )
                elif event.object.payload.get('type') == 'univ-live':
                    univLife_menu = keyboards.univLife(lang, 'university')
                    last_id = vk.messages.edit(
                        peer_id=event.obj.peer_id,
                        message=arrLang['life']['info'],
                        conversation_message_id=event.obj.conversation_message_id,
                        keyboard=univLife_menu.get_keyboard()
                    )
                elif event.object.payload.get('type') == 'spam':
                    kbrd = keyboards.backKbr(lang, 'university')
                    last_id = vk.messages.edit(
                        peer_id=event.obj.peer_id,
                        message=arrLang['spam'],
                        conversation_message_id=event.obj.conversation_message_id,
                        keyboard=kbrd.get_keyboard()
                    )

                # –ú–µ–Ω—é –£–Ω–∏–≤. –ñ–∏–∑–Ω–∏
                elif event.object.payload.get('type') == 'univ-live-news':
                    back = keyboards.backKbr(lang, 'univ-live')
                    last_id = vk.messages.edit(
                        peer_id=event.obj.peer_id,
                        message=arrLang['life']['news'],
                        conversation_message_id=event.obj.conversation_message_id,
                        keyboard=back.get_keyboard()
                    )
                elif event.object.payload.get('type') == 'univ-live-plans':
                    back = keyboards.backKbr(lang, 'univ-live')
                    last_id = vk.messages.edit(
                        peer_id=event.obj.peer_id,
                        message=arrLang['life']['mer'],
                        conversation_message_id=event.obj.conversation_message_id,
                        keyboard=back.get_keyboard()
                    )
                elif event.object.payload.get('type') == 'univ-live-struct':
                    back = keyboards.backKbr(lang, 'univ-live')
                    last_id = vk.messages.edit(
                        peer_id=event.obj.peer_id,
                        message=arrLang['life']['struct'],
                        conversation_message_id=event.obj.conversation_message_id,
                        keyboard=back.get_keyboard()
                    )
                elif event.object.payload.get('type') == 'univ-live-clubs':
                    back = keyboards.clubsMenu(lang, 'univ-live')
                    last_id = vk.messages.edit(
                        peer_id=event.obj.peer_id,
                        message=arrLang['life']['clubs']['info'],
                        conversation_message_id=event.obj.conversation_message_id,
                        keyboard=back.get_keyboard()
                    )
                elif event.object.payload.get('type') == 'univ-life-opportunities':
                    back = keyboards.backKbr(lang, 'univ-live')
                    last_id = vk.messages.edit(
                        peer_id=event.obj.peer_id,
                        message=arrLang['life']['opportunities'],
                        conversation_message_id=event.obj.conversation_message_id,
                        keyboard=back.get_keyboard()
                    )
                elif event.object.payload.get('type') == 'univ-life-museum':
                    back = keyboards.backKbr(lang, 'univ-live')
                    last_id = vk.messages.edit(
                        peer_id=event.obj.peer_id,
                        message=arrLang['life']['museum'],
                        conversation_message_id=event.obj.conversation_message_id,
                        keyboard=back.get_keyboard()
                    )

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª—É–±–æ–≤
            elif event.object.payload.get('type') in ['presscenter','imperial', 'greencubik', 'gamedesign', 'patriotvosp', 'debatclub', 'clubnastav', 'studotryad', 'nackult']:
                type = event.object.payload.get('type')
                arrLang = arrLang['univ-menu']['life']['clubs']
                back = keyboards.backKbr(lang, 'univ-live-clubs')

                last_id = vk.messages.edit(
                    peer_id=event.obj.peer_id,
                    message=arrLang[type],
                    conversation_message_id=event.obj.conversation_message_id,
                    keyboard=back.get_keyboard()
                )

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–µ–≥–æ –º–µ–Ω—é —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤
            elif event.object.payload.get('type') in ['faculties', 'fac1', 'fac2', 'fac3', 'fac4']:
                if event.object.payload.get('type') == 'faculties':
                    kbrd = keyboards.facults_menu(lang, 'main-menu_list')
                    last_id = vk.messages.edit(
                        peer_id=event.obj.peer_id,
                        message=arrLang['faculties-info'],
                        conversation_message_id=event.obj.conversation_message_id,
                        keyboard=kbrd.get_keyboard()
                    )
                elif event.object.payload.get('type') == 'fac1':
                        kbrd = keyboards.facults_menu1(lang, 'main-menu_list')
                        last_id = vk.messages.edit(
                            peer_id=event.obj.peer_id,
                            message='Page: 1',
                            conversation_message_id=event.obj.conversation_message_id,
                            keyboard=kbrd.get_keyboard()
                        )
                elif event.object.payload.get('type') == 'fac2':
                    kbrd = keyboards.facults_menu2(lang, 'main-menu_list')
                    last_id = vk.messages.edit(
                        peer_id=event.obj.peer_id,
                        message='Page: 2',
                        conversation_message_id=event.obj.conversation_message_id,
                        keyboard=kbrd.get_keyboard()
                    )
                elif event.object.payload.get('type') == 'fac3':
                    kbrd = keyboards.facults_menu3(lang, 'main-menu_list')
                    last_id = vk.messages.edit(
                        peer_id=event.obj.peer_id,
                        message='Page: 3',
                        conversation_message_id=event.obj.conversation_message_id,
                        keyboard=kbrd.get_keyboard()
                    )
                elif event.object.payload.get('type') == 'fac4':
                    kbrd = keyboards.facults_menu4(lang, 'main-menu_list')
                    last_id = vk.messages.edit(
                        peer_id=event.obj.peer_id,
                        message='Page: 4',
                        conversation_message_id=event.obj.conversation_message_id,
                        keyboard=kbrd.get_keyboard()
                    )

            elif event.object.payload.get('type') in ['biofacult', 'iggts', 'fad', 'jurfuck', 'fismo', 'fktpm', 'matfak', 'fppk', 'rgf', 'fup', 'fhivt', 'ftf', 'filfac', 'hudgraf', 'econom', 'urfak', 'inspo']:

                kbrd = keyboards.fac_menu(lang, 'main-menu_list', event.obj.payload.get('type'))
                last_id = vk.messages.edit(
                    peer_id=event.obj.peer_id,
                    message=arrLang['faculties-info'],
                    conversation_message_id=event.obj.conversation_message_id,
                    keyboard=kbrd.get_keyboard()
                )

            elif event.object.payload.get('type') == 'fac':
                button = event.object.payload.get('button')
                fac = event.object.payload.get('fac')
                arrFac = languages.faculties[fac]
                kbrd = keyboards.backKbr(lang, fac)
                info = json.loads(function.getFacInfo(fac))
                info = info[lang][0][button]
                last_id = vk.messages.edit(
                    peer_id=event.obj.peer_id,
                    message=info,
                    conversation_message_id=event.obj.conversation_message_id,
                    keyboard=kbrd.get_keyboard()
                )
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            elif event.object.payload.get('type') in ['menu-nav', '1-nav', '2-nav', '3-nav', '4-nav']:
                if event.object.payload.get('type') == 'menu-nav':
                    menu_nav = keyboards.nav_menu(lang, back)
                    last_id = vk.messages.edit(
                        peer_id=event.obj.peer_id,
                        message=arrLang['navigation-menu-info'],
                        conversation_message_id=event.obj.conversation_message_id,
                        keyboard=menu_nav.get_keyboard()
                    )

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
            elif event.object.payload.get('type') in ['settings-menu', 'set-change_lang', 'other-lang', 'about-app']:
                if event.object.payload.get('type') == 'settings-menu':
                    settings_kbrd = keyboards.setting_menu(lang, 'main-menu_list')
                    last_id = vk.messages.edit(
                        peer_id=event.obj.peer_id,
                        message=arrLang['settings-menu-info'],
                        conversation_message_id=event.obj.conversation_message_id,
                        keyboard=settings_kbrd.get_keyboard()
                    )
                    # sender(event.obj.peer_id, arrLang['settings-menu-info'], keyboard=settings_kbrd.get_keyboard())

                elif event.object.payload.get('type') == 'set-change_lang':
                    kbrd_lang = keyboards.lang()
                    last_id = vk.messages.edit(
                        peer_id=event.obj.peer_id,
                        message=arrLang['choose-lang'],
                        conversation_message_id=event.obj.conversation_message_id,
                        keyboard=kbrd_lang.get_keyboard()
                    )
                elif event.object.payload.get('type') == 'other-lang':
                    other_lang = keyboards.other_lang()
                    last_id = vk.messages.edit(
                        peer_id=event.obj.peer_id,
                        message=arrLang['choose-lang'],
                        conversation_message_id=event.obj.conversation_message_id,
                        keyboard=other_lang.get_keyboard()
                    )

                elif event.object.payload.get('type') == 'about-app':
                    kbrd = keyboards.backKbr(lang, back)
                    last_id = vk.messages.edit(
                        peer_id=event.obj.peer_id,
                        message=arrLang['about-app'],
                        conversation_message_id=event.obj.conversation_message_id,
                        keyboard=kbrd.get_keyboard()
                    )

            elif event.object.payload.get('type') == 'panorama':
                kbrd = keyboards.backKbr(lang, 'main-menu_list')
                last_id = vk.messages.edit(
                    peer_id=event.obj.peer_id,
                    message='–ö—Ç–æ –∂–µ –Ω–∞—Å —Å–æ–∑–¥–∞–ª?!'
                            '\n–ù–∏–∫—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç.'
                            '\n–ú—ã —Å–∞–º—ã–π –≥–ª–∞–≤–Ω—ã–π —Å–µ–∫—Ä–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞...'
                            '\n\n–°–æ–∑–¥–∞—Ç–µ–ª—å: [id1|–ü–∞–≤–µ–ª –î—É—Ä–æ–≤]'
                            '\n–ú—ã –≤ –í–ö: [panorama_kubsu|–ò–ê ¬´–ü–∞–Ω–æ—Ä–∞–º–∞ –ö—É–±–ì–£¬ª]',
                    conversation_message_id=event.obj.conversation_message_id,
                    keyboard=kbrd.get_keyboard()
                )
            print(event.obj.payload)


















def loop_a():
    def getName():
        # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞
        try:
            request = vk.messages.getConversationsById(peer_ids=peer_id)
            for response in request['items']:
                chat_settings = response['chat_settings']
                title = chat_settings['title']
            base = vk_parsing.getUser(from_id)
            fullname = base[0]['first_name'] + ' ' + base[0]['last_name']

            group_podgroup = title.partition(' ')[0]
            group = group_podgroup.partition('/')[0]
            podgroup = group_podgroup[group_podgroup.find("/") + 1:]
            if podgroup == '':
                podgroup = None
        except:
            base = vk_parsing.getUser(from_id)
            fullname = base[0]['first_name'] + ' ' + base[0]['last_name']
            group = 0
            podgroup = 0
            group_podgroup = 0
            title = fullname
        return [group_podgroup, fullname, group, podgroup, title]
    try:
        user = 0
        chat = 0
        new_status = ''
        for event in longpoll.listen():
            #–ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if event.type == VkBotEventType.MESSAGE_NEW:

                from_id = event.object.message['from_id']  # id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
                peer_id = event.object.message['peer_id']  # peer_id –±–µ—Å–µ–¥—ã –∏–ª–∏ –õ–°, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

                [group_podgroup, fullname, group, podgroup, title] = getName()

                message = event.object.message['text'].lower()
                Message = event.object.message['text']

                # if message.partition(' ')[0] == '–±–æ—Ç':
                #     num = message[message.find(' ')+1:]
                #     rpc = RpcClient()
                #     try:
                #         sender(peer_id, rpc.call(num))
                #     except:
                #         print(rpc.call(num))

                function.checkName(peer_id=peer_id, title=title)

                #–ï—Å–ª–∏ –±–æ—Ç–∞ –¥–æ–±–∞–≤–∏–ª–∏ –∏–ª–∏ –∫–æ–≥–æ-—Ç–æ –≤ –±–µ—Å–µ–¥—É
                try:
                    action = event.object.message['action']
                    for x in action:
                        if x == 'type':
                            action_new = action[x]
                    if action_new == 'chat_invite_user':
                        if function.checkReg(peer_id=peer_id) == False:
                            keyboard = VkKeyboard(inline=True)
                            keyboard.add_callback_button(label='–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É', color=VkKeyboardColor.POSITIVE,
                                                         payload={"type": "my_own_100500_type_edit"})
                            test = keyboard.get_keyboard()
                            text = 'üìù –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞ –¥–∞–π—Ç–µ –µ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –ø–æ—Å–ª–µ —á–µ–≥–æ –≤–≤–µ–¥–∏—Ç–µ "/reg" –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É".' \
                                   '\nüìú –î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –≤–≤–µ–¥–∏—Ç–µ "/help".'
                            sender(peer_id=peer_id, message=text, keyboard=test)
                except:
                     pass


                #SuperAdmin
                if function.check_adm(peer_id=from_id, lvl=1000) == True:

                    if message.partition(' ')[0] == 'delete':

                        num = message[7:]
                        msg = vk.messages.getHistory(count=int(num), peer_id=peer_id)
                        for x in msg['items']:
                            id=x['id']
                            vk.messages.delete(delete_for_all=1, message_ids=id)
                        #id_list = []
                        #id = event.object.message['id']
                        #id_list.append(str(id))
                        #for i in range(int(num)-1):
                            #id_list.append(str(id-1))
                        #ids = ','.join(id_list)
                        #vk.messages.delete(delete_for_all=1, message_ids=ids)

                    if message in ['–æ—Å–æ', '–ø—Ä–æ—Ñ–∫–æ–º', '—Å—Ç—É–¥', '–ø—Ä–æ—Ñ–±—é—Ä–æ', '–∫—Å–Ω', '—Å–Ω–æ']:
                        news, wals, text = vk_parsing.getNews(message)
                        attach = []
                        attach.append('wall-{}_{}'.format(wals, news))
                        sender(peer_id=peer_id, message=text, attachment=attach)

                #Admin
                if function.check_adm(peer_id=peer_id, lvl=100) == True:

                    if message == '/admin':
                        vk.messages.send(
                            keyboard=admin_board.get_keyboard(),
                            key=(''),  # –í–°–¢–ê–í–ò–¢–¨ –ü–ê–†–ê–ú–ï–¢–†–´
                            server=(''),
                            ts=(''),
                            random_id=get_random_id(),
                            message='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å.',
                            peer_id=peer_id
                        )

                    if '/send' in Message:
                        text = Message[6:]
                        if text[:5] == 'group':
                            perm = function.getMassiv(char='>')
                            text = text[6:]
                        elif text[:6] == 'people':
                            perm = function.getMassiv(char='<')
                            text = text[7:]
                        else:
                            char1 = '['
                            char2 = ']'
                            save = Message
                            id = Message[Message.find(char1) + 1: Message.find(char2)]
                            group = id.split(', ')
                            perm = group
                            text = save[save.find(char2)+2:]

                        carousel = templates.comp()
                        for x in perm:
                            vk.messages.send(
                                peer_id=x,
                                random_id=get_random_id(),
                                message='–ù–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ —É —Ç–≤–æ–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –µ—Å—Ç—å –≥—Ä—É–ø–ø—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è!',
                                template=carousel
                            )

                    if '/add' in Message:
                        text = Message[5:]
                        char1 = '['
                        char2 = ']'
                        save = Message
                        id = Message[Message.find(char1) + 1: Message.find(char2)]
                        group = id.split(', ')
                        perm = group
                        money = save[save.find(char2) + 2:]
                        for x in perm:
                            gaming_func.addBalance(peer_id=x, balance_new=int(money))
                            text = f'–ù–∞ –≤–∞—à —Å—á—ë—Ç –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å—É–º–º–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {money} sc'
                            sender(x, text)

                    if '–Ω–∞–≥—Ä–∞–¥–∏—Ç—å' in message:
                        text = message[13:]
                        import re
                        re.split(' ', text)
                        print(text)

                    if '/msg' in Message:
                        text = Message[5:]
                        if text[:5] == 'group':
                            perm = function.getMassiv(char='>')
                            text = text[6:]
                        elif text[:6] == 'people':
                            perm = function.getMassiv(char='<')
                            text = text[7:]
                        elif text[:3] == 'all':
                            perm = function.getMassiv()
                            text = text[4:]
                        else:
                            char1 = '['
                            char2 = ']'
                            save = Message
                            id = Message[Message.find(char1) + 1: Message.find(char2)]
                            group = id.split(', ')
                            perm = group
                            text = save[save.find(char2) + 2:]

                        attach = event.object.message['attachments']
                        attachments = []
                        lol = ''
                        for block in attach:
                            att_type = block['type']
                            block_t = block[att_type]
                            try:
                                try:
                                    attachments.append('{}{}_{}_{}'.format(block['type'], block_t['owner_id'], block_t['id'], block_t['access_key']))
                                except:
                                    attachments.append(
                                        '{}{}_{}'.format(block['type'], block_t['owner_id'], block_t['id']))
                            except:
                                pass
                            lol = ','.join(attachments)
                        for x in perm:
                            try:
                                sender(peer_id=x, attachment=lol, message=text)
                            except:
                                sender(2000000009, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id{x} –Ω–µ —Ä–∞–∑—Ä–µ—à–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π')

                    if message in ['/ids']:
                        ids = function.getIds()

                        text = '\n'.join(
                            [f'{str(uid)} ‚á® {str(uname)}' for uid, uname in ids])

                        sender(peer_id, text)

                    if message == '—Ç–µ—Å—Ç':
                        keyboard = VkKeyboard(inline=True)
                        keyboard.add_callback_button(label='–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É', color=VkKeyboardColor.PRIMARY,
                                                        payload={"type": "my_own_100500_type_edit"})
                        test = keyboard.get_keyboard()
                        text = 'üìù –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞ –¥–∞–π—Ç–µ –µ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –≤–≤–µ–¥–∏—Ç–µ "/reg".' \
                                '\nüìú –î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –≤–≤–µ–¥–∏—Ç–µ "/help".'
                        vk.messages.send(
                            peer_id=peer_id,
                            random_id=get_random_id(),
                            message=text,
                            keyboard=test
                        )

                    if message == '—Ç–µ—Å—Ç2':
                        keyboard = VkKeyboard(inline=True)
                        keyboard.add_callback_button(label='–ü–æ–∫–∞–∂–∏ pop-up —Å–æ–æ–±—â–µ–Ω–∏–µ', color=VkKeyboardColor.SECONDARY,
                                                        payload={"type": "show_snackbar",
                                                                "text": "–≠—Ç–æ –∏—Å—á–µ–∑–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"})
                        test = keyboard.get_keyboard()
                        text = '–í—Å–ø–ª—ã–≤–∞—à–∫–∞'
                        vk.messages.send(
                            peer_id=peer_id,
                            random_id=get_random_id(),
                            message=text,
                            keyboard=test
                        ),

                #–ó–∞—Ä–µ–≥–∞–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                if message.partition(' ')[0] in ['–±–∞–ª–∞–Ω—Å', '–ø—Ä–æ—Ñ–∏–ª—å', '–º–∞–≥–∞–∑–∏–Ω', '–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ', '—Å—Ç—É–¥–∫–æ–∏–Ω', '—Å—Ç—É–¥–∫–æ–∏–Ω—ã', '/—Å—Ç–∞—Ç—É—Å']:
                    if function.check_adm(peer_id=from_id, lvl=0) == True:
                        #–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        if message.partition(' ')[0] in ['–±–∞–ª–∞–Ω—Å', '–ø—Ä–æ—Ñ–∏–ª—å']:
                            if message == '–±–∞–ª–∞–Ω—Å':
                                try:
                                    balance = gaming_func.check_balance(peer_id=from_id)
                                    ruble = float(balance) * 0.25
                                    sender(peer_id, f'üí≥ C—á–µ—Ç: {balance} –°—Ç—É–¥–ö–æ–∏–Ω–æ–≤'
                                                    f'\n\nüí∞ 1 –°—Ç—É–¥–ö–æ–∏–Ω = 0.25 ‚ÇΩ'
                                                    f'\nüí± –ë–∞–ª–∞–Ω—Å {ruble} ‚ÇΩ')
                                except:
                                    sender(2000000009, f'–û—à–∏–±–∫–∞ –≤ "–ë–∞–ª–∞–Ω—Å" –≤—ã–∑–≤–∞–Ω–∞ @id{from_id}')

                            if message.partition(' ')[0] == '–ø—Ä–æ—Ñ–∏–ª—å':
                                not_cmd = message[message.find(" ") + 1:]
                                who = message[message.find(" ") + 1:]
                                who_id = 0
                                name = ''
                                if message.partition(' ')[0] != who:
                                    try:
                                        import re

                                        whoId0 = who
                                        whoId1 = whoId0.split('|')[0]
                                        who_id = re.findall(r'id(.*)', whoId1)[0]
                                    except:
                                        msg_to = who
                                else:
                                    who_id = from_id

                                base = vk_parsing.getUser(who_id)
                                name = base[0]['first_name'] + ' ' + base[0]['last_name']

                                invList = gaming_func.getInv(peer_id=who_id)
                                [skills] = gaming_func.getSkills(peer_id=who_id)
                                inv = ','.join([f' {item}' for (item,) in invList])
                                import re
                                if re.search(r'\w+', inv) is None:
                                    invent = ''
                                else:
                                    invent = 'üíº –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n' + inv

                                status = function.check_lvl_user(peer_id=who_id)
                                text = f'üë®‚Äçüíª –ü—Ä–æ—Ñ–∏–ª—å @id{who_id}({name})' \
                                       '\n' \
                                       f'\nüí´ –°—Ç–∞—Ç—É—Å: {status}' \
                                       '\n' \
                                       '\n–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏' \
                                       f'\n‚ù§ –ó–¥–æ—Ä–æ–≤—å–µ: {skills[0]}' \
                                       f'\nüß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: {skills[1]}' \
                                       f'\nüåø –õ–æ–≤–∫–æ—Å—Ç—å: {skills[2]}' \
                                       f'\nüë®‚Äçüè´ –ú—É–¥—Ä–æ—Å—Ç—å: {skills[3]}' \
                                       f'\nüçÄ –£–¥–∞—á–∞: {skills[4]}%' \
                                       f'\n' \
                                       f'\n{invent}'
                                sender(peer_id, text)

                        if message.partition(' ')[0] in ['/—Å—Ç–∞—Ç—É—Å']:
                            new_status = Message[8:]

                            admin_tool = VkKeyboard(inline=True)
                            admin_tool.add_callback_button(label='–û—Ç–∫–ª–æ–Ω–∏—Ç—å', color=VkKeyboardColor.NEGATIVE,
                                                     payload={"type": "status_denied"})
                            admin_tool.add_callback_button(label='–ü—Ä–∏–Ω—è—Ç—å', color=VkKeyboardColor.POSITIVE,
                                                     payload={"type": "status_access"})
                            admin = admin_tool.get_keyboard()

                            user = from_id
                            chat = peer_id
                            sender(271870028, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id{from_id}({fullname}) –∂–µ–ª–∞–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å: {new_status}', admin)
                            sender(peer_id, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª –≤–∞—à—É –∑—è–≤–∫—É. –û–Ω–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. '
                                            '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—è–≤–ª–µ–Ω–Ω–æ–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!')



                        # –ú–∞–≥–∞–∑–∏–Ω
                        if message in ['–º–∞–≥–∞–∑–∏–Ω']:

                            if message in ['–º–∞–≥–∞–∑–∏–Ω']:

                                balance = gaming_func.check_balance(peer_id=from_id)
                                shop = VkKeyboard(inline=True)
                                if balance < 250:
                                    shop.add_callback_button(label='–ü—Ä–µ–ø–æ–¥ - 250 –°–ö', color=VkKeyboardColor.NEGATIVE,
                                                             payload={"type": "shop_byer_prepod"})
                                else:
                                    shop.add_callback_button(label='–ü—Ä–µ–ø–æ–¥ - 250 –°–ö', color=VkKeyboardColor.POSITIVE,
                                                             payload={"type": "shop_byer_prepod"})
                                    shop.add_line()

                                if balance < 56:
                                    shop.add_callback_button(label='–¢–µ—Ç—Ä–∞–¥—å 56 –°–ö', color=VkKeyboardColor.NEGATIVE,
                                                             payload={"type": "shop_byer_notebook"})
                                else:
                                    shop.add_callback_button(label='–¢–µ—Ç—Ä–∞–¥—å 56 –°–ö', color=VkKeyboardColor.POSITIVE,
                                                             payload={"type": "shop_byer_notebook"})
                                shop.add_line()

                                if balance < 14:
                                    shop.add_callback_button(label='–î–æ—à–∏–∫ - 14 –°–ö', color=VkKeyboardColor.NEGATIVE,
                                                             payload={"type": "shop_byer_doshik"})
                                else:
                                    shop.add_callback_button(label='–î–æ—à–∏–∫ - 14 –°–ö', color=VkKeyboardColor.POSITIVE,
                                                             payload={"type": "shop_byer_doshik"})
                                    shop.add_line()

                                if balance < 9999999:
                                    shop.add_callback_button(label='–ú–æ–∑–≥ - 99999 –°–ö', color=VkKeyboardColor.NEGATIVE,
                                                             payload={"type": "shop_byer_brain"})
                                else:
                                    shop.add_callback_button(label='–ú–æ–∑–≥ - 9999999 –°–ö', color=VkKeyboardColor.POSITIVE,
                                                             payload={"type": "shop_byer_brain"})

                                shoper = shop.get_keyboard()
                                text = 'üìù –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω.' \
                                       '\n–ß—Ç–æ –∂–µ–ª–∞–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏?.'
                                vk.messages.send(
                                    peer_id=peer_id,
                                    random_id=get_random_id(),
                                    message=text,
                                    keyboard=shoper
                                )
                    else:
                        sender(peer_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /reg')

                # –¢–æ–ª—å–∫–æ –≤ –±–µ—Å–µ–¥–∞—Ö (–Ω—É –∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ª—Å)   ---- –°–¥–µ–ª–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å –±–µ—Å–µ–¥—ã
                if function.check_adm(peer_id=peer_id, lvl=0) == True:
                    # –ï—Å–ª–∏ –±–µ—Å–µ–¥–∞
                    if function.checkGroup(peer_id=peer_id) == True:
                        if message in ['–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±']:
                            try:
                                current_datetime = datetime.now().date()
                                week = function.getWeek(new_date=current_datetime)
                                rasp = function.getAllRasp(group=group, pod_group=podgroup, day=message, week=week)

                                text = '\n'.join(
                                    [f'{str(message_Num)}. {str(message_timeline)} - {str(message_text)}. –ê—É–¥: {str(message_audit)}'
                                     for
                                     message_Num, message_timeline, message_text, message_audit in rasp])

                                sender(peer_id,
                                       f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {str(group)}/{str(podgroup)} –Ω–∞ {str(message)} ({str(week)}):\n\n{str(text)}')
                            except:
                                sender(2000000009, f'–û—à–∏–±–∫–∞ –≤—ã–∑–≤–∞–Ω–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å @id{from_id}')

                        if message in ['–∏–º—è –±–µ—Å–µ–¥—ã']:
                            try:
                                sender(peer_id, "–û–±—â–µ–µ - " + group_podgroup + "\n–ì—Ä—É–ø–ø–∞ - " + group + "\n–ü–æ–¥–≥—Ä—É–ø–ø–∞ - " + podgroup)
                            except:
                                sender(2000000009, f'–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ –±–µ—Å–µ–¥—ã @id{from_id}')

                    # –ó–∞–¥–∞—á–∏
                    try:
                        if message.partition(' ')[0] in ['/task','/deltask','/editask','/comtask','/uncomtask','/alltask']:
                            if message == '/alltask':
                                function.updateTask(id_chat=peer_id)
                                try:
                                    task_list = function.getTasks(id_chat=peer_id)
                                    text = '\n'.join([f'{status} ‚ôØ{num}. {str(task)}' for (num, task, status) in task_list])
                                    if text !='':
                                        sender(peer_id, f'–í–∞—à–∏ –∑–∞–¥–∞—á–∏: '
                                                    f'\n\n{text}')
                                    else:
                                        sender(peer_id, '–í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç üòî')
                                except:
                                    sender(peer_id, '–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–¥–∞—á.')

                            if message.partition(' ')[0] == '/task':
                                new_task = Message[Message.find(' ') + 1:]
                                function.setTask(id_chat=peer_id, task=new_task)

                            if message.partition(' ')[0] == '/deltask':
                                numbers = message[message.find(' ') + 1:]
                                while numbers!="":
                                    number_task = numbers.partition(' ')[0]
                                    function.delTask(id_chat=peer_id, num=number_task)
                                    if numbers == numbers[numbers.find(' ')+1:]:
                                        numbers =""
                                    numbers = numbers[numbers.find(' ')+1:]
                                function.updateTask(id_chat=peer_id)

                            if message.partition(' ')[0] == '/editask':
                                not_cmd = Message[Message.find(' ') + 1:]
                                num = not_cmd.partition(' ')[0]
                                new_text = not_cmd[not_cmd.find(' ') + 1:]

                                function.editTask(id_chat=peer_id, num=num, new_task=new_text)
                                sender(peer_id, '–£—Å–ø–µ—à–Ω–æ.')

                            if message.partition(' ')[0] == '/comtask':
                                numbers = message[message.find(' ') + 1:]
                                while numbers!="":
                                    number_task = numbers.partition(' ')[0]
                                    function.comTask(id_chat=peer_id, num=number_task)
                                    if numbers == numbers[numbers.find(' ')+1:]:
                                        numbers =""
                                    numbers = numbers[numbers.find(' ')+1:]

                            if message.partition(' ')[0] == '/uncomtask':
                                numbers = message[message.find(' ') + 1:]
                                while numbers!="":
                                    number_task = numbers.partition(' ')[0]
                                    function.uncomTask(id_chat=peer_id, num=number_task)
                                    if numbers == numbers[numbers.find(' ')+1:]:
                                        numbers =""
                                    numbers = numbers[numbers.find(' ')+1:]
                    except:
                        pass

                    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    try:
                        if message.partition(' ')[0] in ['–Ω–∞–ø–æ–º–Ω–∏', '–Ω–∞–ø–æ–º–Ω–∏—Ç—å']:
                            what = Message[Message.find(' ')+1:]
                            sec = 0
                            min = 0
                            hour = 0
                            day = 0
                            week = 0
                            import locale
                            locale.setlocale(locale.LC_TIME, 'ru_RU')

                            if '—á–µ—Ä–µ–∑' in what:
                                timeline = what[what.find('—á–µ—Ä–µ–∑')+6:]
                                if ('—Å–µ–∫—É–Ω–¥' or 'c–µ–∫—É–Ω–¥—É') in timeline:
                                    if '—Å–µ–∫—É–Ω–¥—É' == timeline:
                                        sec = 1
                                    else:
                                        sec = timeline.partition(' ')[0]
                                if ('–º–∏–Ω—É—Ç' or '–º–∏–Ω—É—Ç—ã' or '–º–∏–Ω—É—Ç—É') in timeline:
                                    if '–º–∏–Ω—É—Ç—É' == timeline:
                                        min = 1
                                    else:
                                        min = timeline.partition(' ')[0]
                                if ('—á–∞—Å' or '—á–∞—Å–æ–≤' or '—á–∞—Å–∞') in timeline:
                                    if '—á–∞—Å' == timeline:
                                        hour = 1
                                    else:
                                        hour = timeline.partition(' ')[0]
                                if '–Ω–µ–¥–µ–ª—é' in timeline:
                                    hour = 168
                                if '–º–µ—Å—è—Ü' in timeline:
                                    week = 4
                                if ('–¥–Ω–µ–π' or '–¥–Ω—è' or '–¥–µ–Ω—å') in timeline:
                                    if '–¥–µ–Ω—å' in timeline:
                                        day = 2
                                    else:
                                        day = timeline.partition(' ')[0]
                                notic_time = datetime.now() + timedelta(seconds=int(sec), minutes=int(min), hours=int(hour),
                                                                    days=int(day), weeks=int(week))

                                sender(peer_id, f'–•–æ—Ä–æ—à–æ, –∂–¥–∏—Ç–µ –º–µ–Ω—è –≤ {notic_time.strftime("%A, %d %B –≤ %H:%M:%S")}')
                                text = what[:what.find('—á–µ—Ä–µ–∑')]

                                function.setNotice(id_chat=peer_id, timeline=notic_time.strftime("%y-%m-%d %H:%M:%S"), notic=text)

                            elif '–∑–∞–≤—Ç—Ä–∞' in what:
                                notic_time = datetime.now() + timedelta(days=1)
                                sender(peer_id, f'–•–æ—Ä–æ—à–æ, –∂–¥–∏—Ç–µ –º–µ–Ω—è –∑–∞–≤—Ç—Ä–∞ –≤ {notic_time.strftime("%H:%M:%S")}')

                                text = what[:what.find('–∑–∞–≤—Ç—Ä–∞')]
                                function.setNotice(id_chat=peer_id, timeline=notic_time.strftime("%y-%m-%d %H:%M:%S"), notic=text)

                            elif '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞' in what:
                                notic_time = datetime.now() + timedelta(days=2)
                                sender(peer_id, f'–•–æ—Ä–æ—à–æ, –∂–¥–∏—Ç–µ –º–µ–Ω—è –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ –≤ {notic_time.strftime("%H:%M:%S")}')

                                text = what[:what.find('–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞')]
                                function.setNotice(id_chat=peer_id, timeline=notic_time.strftime("%y-%m-%d %H:%M:%S"), notic=text)

                            else:
                                time = what[what.find(':')-2:what.find(':')+3]
                                hour = time.partition(':')[0]
                                min = time[time.find(':')+1:]
                                notic_time = timedelta(hours=int(hour), minutes=int(min))
                                when = datetime.now() - notic_time
                                sender(peer_id, f'–•–æ—Ä–æ—à–æ, –∂–¥–∏—Ç–µ –º–µ–Ω—è —á–µ—Ä–µ–∑ {when.strftime("%M")} –º–∏–Ω—É—Ç, —Ä–æ–≤–Ω–æ –≤ {notic_time}')
                                function.setNotice(id_chat=peer_id, timeline=notic_time, notic=text)
                    except:
                        pass

                    # –ò–≥—Ä—ã
                    if message.partition(' ')[0] in ['—à–ø–∏–æ–Ω—Å—Ç–∞—Ä—Ç', '—à–ø–∏–æ–Ω–≤–æ–π—Ç–∏', '—à–ø–∏–æ–Ω–∞—Ä–µ—Å—Ç', '—à–ø–∏–æ–Ω–∫–æ–Ω–µ—Ü', '—à–ø–∏–æ–Ω–∏–Ω—Ñ–æ']:
                        try:
                            try:
                                command = message.partition(' ')[0]
                                count = message[message.find(" ") + 1:]
                            except:
                                print("–æ—à–∏–±–∫–∞")
                            base = vk_parsing.getUser(from_id)
                            fullname = base[0]['first_name'] + ' ' + base[0]['last_name']

                            const_minute = datetime.now().minute

                            global need_person
                            if count == command:
                                count = 4

                            if command == '—à–ø–∏–æ–Ω—Å—Ç–∞—Ä—Ç':
                                try:
                                    if int(count) < 3:
                                        sender(peer_id, '–£ –≤–∞—Å –Ω–µ—Ç –¥—Ä—É–∑–µ–π?')
                                        continue
                                    need_person = count
                                    need_person = SpyGame.start(count_player=need_person, id_game=peer_id, status="chat",
                                                                id_player=000)
                                    need_person = int(need_person) + 1
                                    sender(peer_id, f'–ò–≥—Ä–∞ –®–ø–∏–æ–Ω –Ω–∞—á–∞—Ç–∞. '
                                                    f'\n–ß—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –∏–≥—Ä—É, –≤–≤–µ–¥–∏—Ç–µ "—à–ø–∏–æ–Ω–≤–æ–π—Ç–∏".'
                                                    f'\n–ù—É–∂–Ω–æ –∫–æ–ª-–≤–æ –∏–≥—Ä–æ–∫–æ–≤: {need_person} '
                                                    f'\n–ò–≥—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç.')
                                except:
                                    print('–û—à–∏–±–∫–∞ –≤ "—à–ø–∏–æ–Ω—Å—Ç–∞—Ä—Ç"')

                            if command == '—à–ø–∏–æ–Ω–≤–æ–π—Ç–∏':
                                try:
                                    if need_person == 1:
                                        need_person = SpyGame.start(count_player=need_person, id_game=peer_id,
                                                                    id_player=from_id, status="person")
                                        sender(peer_id, f'–í—ã –≤–æ—à–ª–∏ –≤ –∏–≥—Ä—É. –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ')
                                        SpyGame.random(id_game=peer_id)
                                        location = SpyGame.location()
                                        person = SpyGame.getPerson(id_game=peer_id)
                                        spy = SpyGame.getSpy(id_game=peer_id)
                                        for x in person:
                                            sender(x, f'–õ–æ–∫–∞—Ü–∏—è: {location}'
                                                      f'\n\n–°—Ä–µ–¥–∏ –Ω–∞—Å —à–ø–∏–æ–Ω! –ï–≥–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏. –ë—ã—Å—Ç—Ä–µ–µ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –≤ –±–µ—Å–µ–¥—É –∏ '
                                                      f'–Ω–∞—á–Ω–∏ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã. –¢–æ–ª—å–∫–æ —Ç–∞–∫ —Ç—ã —Å–º–æ–∂–µ—à—å –≤—ã—è—Å–Ω–∏—Ç—å, –∫—Ç–æ —á—É–∂–∞–∫')

                                        for x in spy:
                                            sender(x, f'–¢–µ–Ω–¥–µ–Ω—Ü–∏—è –∫–∞–∫–∞—è, –æ—Ç–µ—Ü. –¢—ã —à–ø–∏–æ–Ω –∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤—ã—è—Å–Ω–∏—Ç—å –≥–¥–µ —Ç—ã. –£–¥–∞—á–∏)')
                                    elif need_person < 1:
                                        sender(peer_id, f'–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å.')
                                    else:
                                        check = need_person
                                        need_person = SpyGame.start(count_player=need_person, id_game=peer_id,
                                                                    id_player=from_id, status="person")
                                        if check != need_person:
                                            sender(peer_id, f'–í—ã –≤–æ—à–ª–∏ –≤ –∏–≥—Ä—É. –û—Å—Ç–∞–ª–æ—Å—å: {need_person}')
                                        else:
                                            sender(peer_id, '–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ. –û–∂–∏–¥–∞–π—Ç–µ –∏–≥—Ä–æ–∫–æ–≤.')
                                except:
                                    print('–û—à–∏–±–∫–∞ –≤ "—à–ø–∏–æ–Ω–≤–æ–π—Ç–∏"')

                            if command == '—à–ø–∏–æ–Ω–∞—Ä–µ—Å—Ç':
                                import re

                                try:
                                    kickId0 = message[11:]
                                    kickId1 = kickId0.split('|')[0]
                                    kick_id = re.findall(r'id(.*)', kickId1)[0]
                                    voices = SpyGame.getVoice(id_game=peer_id, id_player=kick_id)
                                    need_person_const = SpyGame.getCount(id_game=peer_id)
                                    if need_person_const / voices < 2:
                                        SpyGame.kick(id_game=peer_id, id_player=kick_id)
                                        sender(peer_id, f'–ò–≥—Ä–æ–∫ @id{kick_id} –∫–∏–∫–Ω—É—Ç –∏–∑ –∏–≥—Ä—ã. –ë—ã–ª –ª–∏ –æ–Ω —à–ø–∏–æ–Ω–æ–º?')
                                        spy_count = SpyGame.checkSpy(id_game=peer_id)

                                        if spy_count == 0:
                                            sender(peer_id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í –∏–≥—Ä–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —à–ø–∏–æ–Ω–∞! –í—ã –ø–æ–±–µ–¥–∏–ª–∏")
                                            players = SpyGame.getPlayers(id_game=peer_id)
                                            SpyGame.finish(id_game=peer_id)
                                            for x in players:
                                                gaming_func.addBalance(peer_id=x, balance_new=50)
                                        else:
                                            sender(peer_id, f"–í –∏–≥—Ä–µ –æ—Å—Ç–∞–ª–æ—Å—å —à–ø–∏–æ–Ω–æ–≤: {spy_count}")
                                except:
                                    print('–û—à–∏–±–∫–∞ –≤ "—à–ø–∏–æ–Ω–∞—Ä–µ—Å—Ç"')

                            try:
                                if command == '—à–ø–∏–æ–Ω–∫–æ–Ω–µ—Ü':
                                    SpyGame.finish(id_game=peer_id)
                                    sender(peer_id, '–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.')
                            except:
                                print("–û—à–∏–±–∫–∞ –≤ '—à–ø–∏–æ–Ω–∫–æ–Ω–µ—Ü'")

                            if command == '—à–ø–∏–æ–Ω–∏–Ω—Ñ–æ':
                                text = 'üìú –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã "–ù–∞—Ö–æ–¥–∫–∞ –¥–ª—è —à–ø–∏–æ–Ω–∞".' \
                                       '\n\nüéØ –¶–µ–ª—å –∏–≥—Ä—ã.' \
                                       '\n–¶–µ–ª—å —à–ø–∏–æ–Ω–∞: –Ω–µ —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–µ–±—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞—É–Ω–¥–∞ –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—Å–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è.' \
                                       '\n–¶–µ–ª—å –Ω–µ—à–ø–∏–æ–Ω–æ–≤: –µ–¥–∏–Ω–æ–≥–ª–∞—Å–Ω–æ —É–∫–∞–∑–∞—Ç—å —à–ø–∏–æ–Ω–∞ –∏, —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —Ä–∞–∑–æ–±–ª–∞—á–∏—Ç—å –µ–≥–æ.' \
                                       '\n\nüöß –û–±–∑–æ—Ä –∏–≥—Ä—ã.' \
                                       '\n–ò–≥—Ä–æ–≤–∞—è –ø–∞—Ä—Ç–∏—è —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ä–∞—É–Ω–¥–æ–≤. –í –∫–∞–∂–¥–æ–º —Ä–∞—É–Ω–¥–µ –∏–≥—Ä–æ–∫–∏ –æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ –∫–∞–∫–æ–π-—Ç–æ –ª–æ–∫–∞—Ü–∏–∏, —É –∫–∞–∂–¥–æ–≥–æ ‚Äî —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å. ' \
                                       '–û–¥–∏–Ω –Ω–µ–∏–∑–±–µ–∂–Ω–æ –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —à–ø–∏–æ–Ω–æ–º, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ ' \
                                       '–∑–Ω–∞–µ—Ç, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è. –ï–≥–æ –∑–∞–¥–∞—á–∞ ‚Äî —Ä–∞–∑–≥–æ–≤–æ—Ä–∏—Ç—å –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤, –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –∏ –Ω–µ —Ä–∞–∑–æ–±–ª–∞—á–∏—Ç—å ' \
                                       '—Å–µ–±—è. –ö–∞–∂–¥—ã–π –Ω–µ—à–ø–∏–æ–Ω –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å –ø—ã—Ç–∞–µ—Ç—Å—è ' \
                                       '–æ–±—Ç–µ–∫–∞–µ–º–æ –¥–∞—Ç—å –ø–æ–Ω—è—Ç—å ¬´—Å–≤–æ–∏–º¬ª, —á—Ç–æ –∑–Ω–∞–µ—Ç, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è, –∏ –ø–æ—ç—Ç–æ–º—É –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —à–ø–∏–æ–Ω–æ–º. –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Å–æ–±—Ä–∞–Ω–Ω–æ—Å—Ç—å, –≤—ã–¥–µ—Ä–∂–∫–∞, —Ö–∏—Ç—Ä–æ—Å—Ç—å ‚Äî ' \
                                       '–≤ —ç—Ç–æ–π –∏–≥—Ä–µ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –≤—Å—ë. –ë—É–¥—å—Ç–µ –Ω–∞—á–µ–∫—É!' \
                                       '\n\n‚õΩ –•–æ–¥ –∏–≥—Ä—ã.' \
                                       '\n–†–∞–∑–¥–∞—é—â–∏–π –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä, –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É. –û–Ω –∑–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å –ª—é–±–æ–º—É –¥—Ä—É–≥–æ–º—É ' \
                                       '–∏–≥—Ä–æ–∫—É, –æ–±—Ä–∞—â–∞—è—Å—å –∫ –Ω–µ–º—É –ø–æ –∏–º–µ–Ω–∏: ¬´–ê —Å–∫–∞–∂–∏–∫–∞ –º–Ω–µ, –†–∏—Ç–∞...¬ª –ö–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, –≤–æ–ø—Ä–æ—Å—ã –∫–∞—Å–∞—é—Ç—Å—è ' \
                                       '—É–∫–∞–∑–∞–Ω–Ω–æ–π –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –∑–∞–≥–∞–¥–æ—á–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏: —ç—Ç–æ ' \
                                       '–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ. –í–æ–ø—Ä–æ—Å –∑–∞–¥–∞—ë—Ç—Å—è ' \
                                       '–æ–¥–∏–Ω —Ä–∞–∑ –∏ –±–µ–∑ —É—Ç–æ—á–Ω–µ–Ω–∏–π. –û—Ç–≤–µ—Ç —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç ' \
                                       '–±—ã—Ç—å –ª—é–±—ã–º. –ó–∞—Ç–µ–º –æ—Ç–≤–µ—Ç–∏–≤—à–∏–π –Ω–∞ –≤–æ–ø—Ä–æ—Å –∑–∞–¥–∞—ë—Ç ' \
                                       '–≤–æ–ø—Ä–æ—Å –ª—é–±–æ–º—É –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É, –∫—Ä–æ–º–µ —Ç–æ–≥–æ, –∫—Ç–æ ' \
                                       '–ø–µ—Ä–µ–¥ —ç—Ç–∏–º –∑–∞–¥–∞–ª –µ–º—É –≤–æ–ø—Ä–æ—Å (—Ç. –µ. –Ω–µ–ª—å–∑—è —Å–ø—Ä–æ—Å–∏—Ç—å –≤ –æ—Ç–≤–µ—Ç). –ü–æ—Ä—è–¥–æ–∫ –æ–ø—Ä–æ—Å–∞ –∏–≥—Ä–æ–∫–∏ –≤—ã—Å—Ç—Ä–æ—è—Ç ' \
                                       '—Å–∞–º–∏ ‚Äî —ç—Ç–æ –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–π, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ –≤–æ–ø—Ä–æ—Å–∞—Ö –∏ –æ—Ç–≤–µ—Ç–∞—Ö. ' \
                                       '\n\n‚ô® –ö–æ–º–º–∞–Ω–¥—ã.' \
                                       '\n"—à–ø–∏–æ–Ω—Å—Ç–∞—Ä—Ç" - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º' \
                                       '\n"—à–ø–∏–æ–Ω—Å—Ç–∞—Ä—Ç <—á–∏—Å–ª–æ>" - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É –Ω–∞ <—á–∏—Å–ª–æ> —á–µ–ª–æ–≤–µ–∫ (<> - –ø–∏—Å–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ)' \
                                       '\n"—à–ø–∏–æ–Ω–≤–æ–π—Ç–∏" - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ.' \
                                       '\n"—à–ø–∏–æ–Ω–∞—Ä–µ—Å—Ç <—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ>" - –æ—Ç–¥–∞—Ç—å —Å–≤–æ–π –≥–æ–ª–æ—Å –∑–∞ –∏–∑–≥–Ω–∞–Ω–∏–µ <—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ> –∏–≥—Ä–æ–∫–∞. ' \
                                       '\n"—à–ø–∏–æ–Ω–∫–æ–Ω–µ—Ü" - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É' \
                                       '–ö–∞–∫ —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–≤ –±–æ–ª—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∏–≥—Ä–æ–∫ –≤—ã–ª–µ—Ç–∞–µ—Ç –∏–∑ –∏–≥—Ä—ã (<> - –ø–∏—Å–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ)' \
                                       '\n\n–ó–∞–¥–∞–≤–∞–π—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥—É –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –æ—Å–æ–±–æ–µ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ.' \
                                       '\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å–µ —à–ø–∏–æ–Ω—ã –±—É–¥—É—Ç –≤—ã–≥–Ω–∞–Ω—ã –∏–∑ –∏–≥—Ä—ã, –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è. ' \
                                       '–ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è 50 –°—Ç—É–¥–ö–æ–∏–Ω–æ–≤' \
                                       '–ò–≥—Ä–∞ –±—É–¥–µ—Ç –¥–æ—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –µ—Å–ª–∏ —à–ø–∏–æ–Ω —É–≥–∞–¥—ã–≤–∞–µ—Ç –ª–æ–∫–∞—Ü–∏—é, —Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å "—à–ø–∏–æ–Ω–∫–æ–Ω–µ—Ü".'
                                sender(peer_id, text)
                        except:
                            sender(2000000009, '–û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ "—à–ø–∏–æ–Ω"')

                    if message.partition(' ')[0] in ['—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '—Ä–∞—Å–ø—Ñ–æ—Ç–æ']:
                        [group_podgroup, fullname, group, podgroup, title] = getName()

                        if message[message.find(' ') + 1:] != message.partition(' ')[0]:
                            group_podgroup = message[message.find(' ') + 1:]
                            print(group_podgroup.find('/'))
                            if group_podgroup.find('/')!=(-1):
                                group = group_podgroup[:group_podgroup.find('/')]
                                podgroup = group_podgroup[group_podgroup.find('/') + 1:]
                            else:
                                group = group_podgroup
                                podgroup = None

                        if message.partition(' ')[0] == '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
                            try:
                                current_datetime = datetime.now().date()
                                week = function.getWeek(new_date=current_datetime)
                                moneday = function.getAllRasp(group=group, pod_group=podgroup, day="–ø–Ω", week=week)
                                tuesday = function.getAllRasp(group=group, pod_group=podgroup, day="–≤—Ç", week=week)
                                wednesday = function.getAllRasp(group=group, pod_group=podgroup, day="—Å—Ä", week=week)
                                thursday = function.getAllRasp(group=group, pod_group=podgroup, day="—á—Ç", week=week)
                                friday = function.getAllRasp(group=group, pod_group=podgroup, day="–ø—Ç", week=week)
                                saturday = function.getAllRasp(group=group, pod_group=podgroup, day="—Å–±", week=week)

                                moneday_week = '\n'.join(
                                    [
                                        f'{str(message_Num)}. {str(message_timeline)} - {str(message_text)}. –ê—É–¥: {str(message_audit)}'
                                        for
                                        message_Num, message_timeline, message_text, message_audit in moneday])
                                tuesday_week = '\n'.join(
                                    [
                                        f'{str(message_Num)}. {str(message_timeline)} - {str(message_text)}. –ê—É–¥: {str(message_audit)}'
                                        for
                                        message_Num, message_timeline, message_text, message_audit in tuesday])
                                wednesday_week = '\n'.join(
                                    [
                                        f'{str(message_Num)}. {str(message_timeline)} - {str(message_text)}. –ê—É–¥: {str(message_audit)}'
                                        for
                                        message_Num, message_timeline, message_text, message_audit in wednesday])
                                thursday_week = '\n'.join(
                                    [
                                        f'{str(message_Num)}. {str(message_timeline)} - {str(message_text)}. –ê—É–¥: {str(message_audit)}'
                                        for
                                        message_Num, message_timeline, message_text, message_audit in thursday])
                                friday_week = '\n'.join(
                                    [
                                        f'{str(message_Num)}. {str(message_timeline)} - {str(message_text)}. –ê—É–¥: {str(message_audit)}'
                                        for
                                        message_Num, message_timeline, message_text, message_audit in friday])
                                saturday_week = '\n'.join(
                                    [
                                        f'{str(message_Num)}. {str(message_timeline)} - {str(message_text)}. –ê—É–¥: {str(message_audit)}'
                                        for
                                        message_Num, message_timeline, message_text, message_audit in saturday])

                                text = f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é ({week}) –¥–ª—è {group_podgroup}' \
                                       f'\n\n‚Å£‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ–ü–ù' \
                                       f'\n{moneday_week}' \
                                       f'\n\n‚Å£‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ–í–¢' \
                                       f'\n{tuesday_week}' \
                                       f'\n\n‚Å£‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ–°–†' \
                                       f'\n{wednesday_week}' \
                                       f'\n\n‚Å£‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ–ß–¢' \
                                       f'\n{thursday_week}' \
                                       f'\n\n‚Å£‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ–ü–¢' \
                                       f'\n{friday_week}' \
                                       f'\n\n‚Å£‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ–°–ë' \
                                       f'\n{saturday_week}'

                                sender(peer_id, text)
                            except:
                                sender(2000000009, f'–æ—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è" @id{from_id}')
                        elif message.partition(' ')[0] == '—Ä–∞—Å–ø—Ñ–æ—Ç–æ':
                            try:
                                sender(peer_id=peer_id, message='–ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ')
                                import shutil

                                shutil.copyfile("template.docx", "temp_template.docx")
                                file = "temp_template"
                                faculty = '–§–∞–∫—É–ª—å—Ç–µ—Ç –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –ü—Ä–∏–∫–ª–∞–¥–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏'

                                current_datetime = datetime.now().date()
                                week = function.getWeek(new_date=current_datetime)

                                moneday = function.getAllRasp(group=group, pod_group=podgroup, day="–ø–Ω", week=week)
                                tuesday = function.getAllRasp(group=group, pod_group=podgroup, day="–≤—Ç", week=week)
                                wednesday = function.getAllRasp(group=group, pod_group=podgroup, day="—Å—Ä", week=week)
                                thursday = function.getAllRasp(group=group, pod_group=podgroup, day="—á—Ç", week=week)
                                friday = function.getAllRasp(group=group, pod_group=podgroup, day="–ø—Ç", week=week)
                                saturday = function.getAllRasp(group=group, pod_group=podgroup, day="—Å–±", week=week)

                                docWriter.generateRasp(group, podgroup, faculty, week, moneday, tuesday, wednesday, thursday,
                                                       friday,
                                                       saturday, file)

                                # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
                                attachments = []

                                check_file = file + '-final'
                                docWriter.docxPdf(check_file + '.docx')

                                docWriter.pdfImage(check_file + '.pdf')

                                pages = docWriter.pdfImage(check_file + '.pdf')
                                for page in pages:
                                    page.save('out.jpg', 'JPEG')

                                image = "out.jpg"
                                upload = VkUpload(vk)
                                upload_image = upload.photo_messages(photos=image)[0]
                                attachments.append('photo{}_{}'.format(upload_image['owner_id'], upload_image['id']))

                                sender(peer_id=peer_id, message='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—è–≤–∏—Å—å!')

                                sender(peer_id=peer_id, message='–î–µ—Ä–∂–∏—Ç–µ —Å–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!', attachment=','.join(attachments))
                                import os

                                path = os.path.join(os.path.abspath(os.path.dirname(__file__)), 'out.jpg')
                                os.remove(path)
                                path = os.path.join(os.path.abspath(os.path.dirname(__file__)), check_file + '.pdf')
                                os.remove(path)
                                path = os.path.join(os.path.abspath(os.path.dirname(__file__)), check_file + '.docx')
                                os.remove(path)
                                path = os.path.join(os.path.abspath(os.path.dirname(__file__)), 'temp_template.docx')
                                os.remove(path)
                            except:
                                sender(2000000009, f'–û—à–∏–±–∫–∞ –≤—ã–∑–≤–∞–Ω–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–∑–Ω–∞—Ç—å "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ" @id{from_id}')

                #–ë–ª–æ–∫ –Ω–∞ –ª—é–±—ã–µ –∫–æ–º–∞–Ω–¥—ã
                # for sql_phrases in function.getComList():
                #     (phrases,) = sql_phrases
                #     list = phrases.split(',')
                #     for word in list:
                #         if nltk.edit_distance(word, filter_text(message)) / len(word) < 0.4:
                #             sender(peer_id, function.getCom(cmd=message, peer_id=peer_id))
                #             break

                #–î–ª—è –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if message.partition(' ')[0] in config.keyword_phrases or '/' in message:

                    if message == '–∫–æ—Å—Ç–µ–Ω–∫–æ':
                        quotation = function.getQuotation()
                        text = '\n'.join(
                            [f'{str(text)}\n\n#{str(name_prepod)} {str(predmet)}\n#{str(faculty)}' for
                             text, name_prepod, predmet, faculty in quotation])
                        sender(peer_id, text)

                    if message.partition(' ')[0] == '–≥–æ—Ä–æ—Å–∫–æ–ø':
                        text = message[9:]
                        info = function.getHoros(title=text)
                        horos = f'{info[0]}\n\n{info[1]}'

                        image = f'F:/Dev/Python/Projects/VKbot/horoscope/{info[2]}'
                        attachments = []
                        upload = VkUpload(vk)
                        upload_image = upload.photo_messages(photos=image)[0]
                        attachments.append('photo{}_{}'.format(upload_image['owner_id'], upload_image['id']))

                        sender(peer_id, horos, ','.join(attachments))

                    if Message.partition(' ')[0] in ['/report']:
                        command = message.partition(' ')[0]
                        text = Message[message.find(" ") + 1:]

                        try:
                            request = vk.messages.getConversationsById(peer_ids=peer_id)
                            for response in request['items']:
                                chat_settings = response['chat_settings']
                                title = chat_settings['title']
                        except:
                            title = fullname
                        print(f'REPORT -> @id{from_id} ({title}): '
                              f'\n{text}')

                        report = RpcClient()
                        sender(2000000009, f'REPORT -> @id{from_id} ({title}): '
                                           f'\n{text}')
                        sender(peer_id, report.callReportTG(f'{title} -> {text}'))


                basa_roul = ['—Ä—É–ª–µ—Ç–∫–∞', '–ø–∏—Å—Ç–æ–ª–µ—Ç', '—Å–º–µ—Ä—Ç—å', '—É–±–µ–π—Ç–µ']
                ford = message.split(' ')
                flag = False
                for word in basa_roul:
                    for mes in ford:
                        if nltk.edit_distance(word, filter_text(mes)) / len(word) < 0.4:
                            num = random.randint(1, 100)
                            base = vk_parsing.getUser(from_id)
                            first_name = base[0]['first_name']
                            text = f"{first_name} —Ä–∞—Å–∫—Ä—É—á–∏–≤–∞–µ—Ç –±–∞—Ä–∞–±–∞–Ω –∏ –ø–æ–¥–Ω–æ—Å–∏—Ç –∫ –≤–∏—Å–∫—É" \
                                    f"\n..–°–ø—É—Å–∫–∞–µ—Ç –∫—É—Ä–æ–∫.."
                            msg_from = f'[id{from_id}|{first_name}]'
                            if num < 50:
                                text+=f"\n\n–©–µ–ª—á–æ–∫! –ü–æ—Ö–æ–∂–µ {msg_from} –±—É–¥–µ—Ç –∂–∏—Ç—å (–í —ç—Ç–æ—Ç —Ä–∞–∑!)"
                            if num >= 50:
                                text+=f"\n\n–©–µ–ª—á–æ–∫! –ü—Ä–æ—â–∞–π {msg_from} ..."
                            sender(peer_id, text)
                            flag = True
                            break
                        if flag:
                            break

                #–î—Ä–æ–ø
                # if Message in ['LootBox']:
                #     if Message in ['LootBox']:
                #         balance = gaming_func.check_balance(peer_id=from_id)
                #
                #         loot = VkKeyboard(inline=True)
                #         loot.add_callback_button(label='LootBox –∑–∞ 100 sc', color=VkKeyboardColor.POSITIVE,
                #                                  payload={"type": "lootbox_100"})
                #         loot.add_line()
                #         loot.add_callback_button(label='LootBox –∑–∞ 5000 sc', color=VkKeyboardColor.POSITIVE,
                #                                  payload={"type": "lootbox_5000"})
                #
                #         casino = loot.get_keyboard()
                #         text = f'–û—Ç–∫—Ä–æ–π—Ç–µ LootBox –∑–∞ 5—Ç—ã—Å sc –∏ –ø–æ–ª—É—á–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –Ω–∞–≥—Ä–∞–¥:' \
                #                f'\n1. –û—Ç 600 –¥–æ 35—Ç—ã—Å –°—Ç—É–¥–ö–æ–∏–Ω–æ–≤ ' \
                #                f'\n2. –ö–Ω–∏–≥–∞ "–≠–õ–ï–ú–ï–ù–¢–´ –î–ò–°–ö–†–ï–¢–ù–û–ô –ú–ê–¢–ï–ú–ê–¢–ò–ö–ò" –ö.–ò. –ö–æ—Å—Ç–µ–Ω–∫–æ' \
                #                f'\n3. –°–æ—Ä–≤–∞—Ç—å –≤–µ—Å—å –∫—É—à - –¥–∂–µ–∫–ø–æ—Ç' \
                #                f'\n4. –ú–æ–∑–≥–∏ –ì–µ–Ω–∏—è' \
                #                f'\n5. –ê–∫—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏ "–õ—è –ö–æ—Å—Ç—è"' \
                #                f'\n6. –°–∫–∏–¥–∫–∞ 5% –Ω–∞ –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏ –±—É—Ñ–µ—Ç–∞' \
                #                f'\n\nJACKPOT: 10 000 SC' \
                #                f'\n\n–í–∞—à —Å—á—ë—Ç: {balance}'
                #         vk.messages.send(
                #             peer_id=peer_id,
                #             random_id=get_random_id(),
                #             message=text,
                #             keyboard=casino
                #         )

                #–†–ü
                if message.partition(' ')[0] in ['–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å', '—É—à–∞—Ç–∞—Ç—å', '—à–ª–µ–ø–Ω—É—Ç—å', '—à–ª—ë–ø–Ω—É—Ç—å', '–ø–æ–∑–¥—Ä–∞–≤–ª—è—é', '–∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫']:
                    command = message.partition(' ')[0]
                    not_cmd = message[message.find(" ") + 1:]
                    who = not_cmd[:not_cmd.find(" ")]
                    text = not_cmd[not_cmd.find(" ") + 1:]
                    if text == who+']':
                        text = ''

                    id_from = vk_parsing.getUser(from_id)
                    name_from = id_from[0]['first_name'] + ' ' + id_from[0]['last_name']
                    msg_from = f'[id{from_id}|{name_from}]'

                    try:
                        import re
                        whoId0 = who
                        whoId1 = whoId0.split('|')[0]
                        who_id = re.findall(r'id(.*)', whoId1)[0]
                        id_to = vk_parsing.getUser(who_id)
                        name_to = id_to[0]['first_name'] + ' ' + id_to[0]['last_name']
                        msg_to = f'[id{who_id}|{name_to}]'
                    except:
                        msg_to = who

                    if command == '–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å':
                        if who_id == '271870028':
                            sender(peer_id, f'–Ø –±—ã –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª, –¥–∞ –ª–µ–Ω—å')
                        elif who_id == '219752733':
                            sender(peer_id, '–¢–µ–ø–µ—Ä—å —Ç—ã –æ–±—è–∑–∞–Ω –Ω–∞ –º–Ω–µ –∂–µ–Ω–∏—Ç—å—Å—è')
                        else:
                            sender(peer_id, f'‚ù§ {msg_from} üòò –ø–æ—Ü–µ–ª–æ–≤–∞–ª {msg_to}')

                    if command == '—É—à–∞—Ç–∞—Ç—å':
                        if who_id == '271870028':
                            sender(peer_id, '–ê–≥–∞, —É–∂–µ —à–∞—Ç–∞—é—Å—å')
                        elif who_id == '219752733':
                            sender(peer_id, f'–ñ–¥–∏, –∞—Ä–º—è–Ω—Å–∫–∞—è –º–∞—Ñ–∏—è —É–∂–µ –≤—ã–µ—Ö–∞–ª–∞ –∑–∞ —Ç–æ–±–æ–π')
                        else:
                            sender(peer_id, f'üòé {msg_from} ü§úüèª —É—à–∞—Ç–∞–ª {msg_to}')

                    if command in ['—à–ª–µ–ø–Ω—É—Ç—å','—à–ª—ë–ø–Ω—É—Ç—å']:
                        if who_id == '271870028':
                            sender(peer_id, f'–û—Ç—Ä–∞–∑–∏–ª —à–ª–µ–ø–æ–∫ —Ö—É–µ–º —Ç–µ–±–µ –ø–æ –ª–±—É')
                        elif who_id == '219752733':
                            sender(peer_id, f'–ñ–¥–∏, –∞—Ä–º—è–Ω—Å–∫–∞—è –º–∞—Ñ–∏—è —É–∂–µ –≤—ã–µ—Ö–∞–ª–∞ –∑–∞ —Ç–æ–±–æ–π')
                        else:
                            sender(peer_id, f'üòè {msg_from} ‚úãüèª —à–ª–µ–ø–Ω—É–ª {msg_to}')
                    if command == '—Ç—Ä–∞—Ö–Ω—É—Ç—å':
                        if who_id == '271870028':
                            sender(peer_id, f'–û–Ω —Å–∞–º —Ç–µ–±—è —Å–µ–π—á–∞—Å —Ç—Ä–∞—Ö–Ω–µ—Ç –∑–∞ —Ç–∞–∫–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è')
                        elif who_id == '219752733':
                            sender(peer_id, f'{msg_from}, —Ç–≤–æ–π –¥–∂—É–¥–∂—É–ª—å –µ—â—ë –Ω–µ –¥–æ—Ä–æ—Å –¥–ª—è —Ç–∞–∫–∏—Ö –∏–≥—Ä')
                        else:
                            sender(peer_id, f'üòè {msg_from} üçÜüçë —Ç—Ä–∞—Ö–Ω—É–ª üí¶{msg_to}')

                    if command == '–∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫':
                        sender(peer_id, "", 'photo-198776140_457239393')

                    # –ü–æ–∑–¥—Ä–∞–≤–ª—è–ª–∫–∞
                    # try:
                    #     if command in ['–ø–æ–∑–¥—Ä–∞–≤–ª—è—é']:
                    #         [group_podgroup, fullname, group, podgroup, title] = getName()
                    #         sender(peer_id=peer_id, message='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ')
                    #         import shutil
                    #
                    #         shutil.copyfile("mart8.docx", "mart8_template.docx")
                    #         file = "mart8_template"
                    #
                    #         base = vk_parsing.getUser(who_id)
                    #         name_to = base[0]['first_name']
                    #         base = vk_parsing.getUser(from_id)
                    #         name_from = base[0]['first_name'] + ' ' + base[0]['last_name']
                    #
                    #         docWriter.generate8mart(name_to, text, name_from, file)
                    #
                    #         # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
                    #         attachments = []
                    #
                    #         check_file = file + '-final'
                    #
                    #         docWriter.docxPdf(check_file + '.docx')
                    #
                    #         docWriter.pdfImage(check_file + '.pdf')
                    #
                    #         pages = docWriter.pdfImage(check_file + '.pdf')
                    #         for page in pages:
                    #             page.save('8mart.jpg', 'JPEG')
                    #
                    #         image = "F:/Dev/Python/Projects/VKbot/8mart.jpg"
                    #         upload = VkUpload(vk)
                    #         upload_image = upload.photo_messages(photos=image)[0]
                    #         attachments.append('photo{}_{}'.format(upload_image['owner_id'], upload_image['id']))
                    #         if peer_id == from_id:
                    #             id = who_id
                    #         else:
                    #             id = peer_id
                    #
                    #         vk.messages.send(
                    #             peer_id=id,
                    #             message=f'–¢–µ–±–µ —Å—é—Ä–ø—Ä–∏–∑ –æ—Ç [id{from_id}|{name_from}] üòè',
                    #             random_id=get_random_id(),
                    #             attachment=','.join(attachments)
                    #         )
                    #         import os
                    #
                    #         path = os.path.join(os.path.abspath(os.path.dirname(__file__)), '8mart.jpg')
                    #         os.remove(path)
                    #         path = os.path.join(os.path.abspath(os.path.dirname(__file__)), check_file + '.pdf')
                    #         os.remove(path)
                    #         path = os.path.join(os.path.abspath(os.path.dirname(__file__)), check_file + '.docx')
                    #         os.remove(path)
                    #         path = os.path.join(os.path.abspath(os.path.dirname(__file__)), 'mart8_template.docx')
                    #         os.remove(path)
                    # except:
                    #     sender(2000000009, f'–û—à–∏–±–∫–∞ –≤ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–∏ –≤—ã–∑–≤–∞–Ω–Ω–∞—è @id{from_id}')

                if message in ['–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n–º–µ–Ω—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä.']:
                    market = event.object.message['attachments']
                    ld = json.dumps(market)
                    market_att = json.loads(ld)
                    title = ''
                    price_rub = 0
                    price_sc = 0
                    for x in market_att:
                        title = x['market']['title']
                        price = x['market']['price']['amount']
                        price_rub = int(price)/100
                        price_sc = int(price)/10

                    chose_value = VkKeyboard(inline=True)
                    chose_value.add_callback_button(label='–†—É–±–ª–∏', color=VkKeyboardColor.NEGATIVE,
                                                 payload={"type": "Ruble"})
                    chose_value.add_callback_button(label='–°—Ç—É–¥–ö–æ–∏–Ω—ã', color=VkKeyboardColor.POSITIVE,
                                                 payload={"type": "StudCoin"})

                    chose_key = chose_value.get_keyboard()

                    text = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è '+title+'.\n–í —Ä—É–±–ª—è—Ö = '+str(price_rub)+\
                               '\n–í –°—Ç—É–¥–ö–æ–∏–Ω–∞—Ö = '+str(price_sc)
                    sender(peer_id, text, chose_key)

                #–õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                else:
                    base = vk_parsing.getUser(from_id)
                    fullname = base[0]['first_name'] + ' ' + base[0]['last_name']
                    try:
                        if fullname == title:
                            text = f'{fullname}: {message}'
                        else:
                            text = f'{title} -> {fullname}: {message}'
                    except:
                        text = f'{fullname}: {message}'

                    import requests  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
                    att = event.object.message['attachments']

                    rpc = RpcClient()
                    info = {
                        "peer_id": peer_id,
                        "from_id": from_id,
                        "message": message,
                        "attachments": event.object.message['attachments']
                    }

                    link = None
                    for x in att:
                        try:
                            link = x['audio_message']['link_mp3']
                        except:
                            pass

                    if link != None:
                        req = requests.get(link, stream=True)
                        with open('F:\Dev\Python\Projects\CoreBot\Audio.mp3', 'wb') as a:
                            a.write(req.content)
                        audio = {
                            'peer_id': peer_id,
                            'from_id': from_id,
                            'text': 'audio_message',
                            'fwd_messages':[],
                            'attachments':[]
                        }
                        answer = json.loads(rpc.call(audio))
                        if answer['text'] != 'No':

                            audiom = []
                            upload = VkUpload(vk)
                            audio_path = "F:\dev\python\projects\CoreBot\output.ogg"
                            upload_audio = upload.document(
                                    audio_path,
                                    doc_type='audio_message',
                                    message_peer_id=271870028,
                                    group_id=198776140,
                                    to_wall=False
                            )['audio_message']
                            audiom.append('doc{}_{}'.format(upload_audio['owner_id'], upload_audio['id']))
                            sender(peer_id, '', ','.join(audiom))
                    else:
                        answer = json.loads(rpc.call(event.object.message))
                        print(answer)
                        if answer['type'] in ['ai_lvl', 'any_cmd', 'answer']:
                            text = f"{answer['text']}"
                            sender(answer['peer_id'], text)

            #–ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –∫–Ω–æ–ø–∫–∞
            elif event.type == VkBotEventType.MESSAGE_EVENT:
                CALLBACK_TYPES = ('show_snackbar', 'open_link', 'open_app')
                try:
                    print(event.obj)
                    if event.object.payload.get('type') in CALLBACK_TYPES:
                        r = vk.messages.sendMessageEventAnswer(
                            event_id=event.object.event_id,
                            user_id=event.object.user_id,
                            peer_id=event.object.peer_id,
                            event_data=json.dumps(event.object.payload))


                    elif event.object.payload.get('type') == 'status_denied':
                        sender(user, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞(')
                        new_status = ''
                        user = 0
                        chat = 0

                    elif event.object.payload.get('type') == 'status_access':
                        function.add_status(peer_id=user, new_status=new_status)
                        sender(chat, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –ù–∞–ø–∏—à–∏—Ç–µ "–ü—Ä–æ—Ñ–∏–ª—å", —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å!')

                    elif event.object.payload.get('type') == 'my_own_100500_type_edit':
                        request = vk.messages.getConversationsById(peer_ids=peer_id)
                        for response in request['items']:
                            chat_settings = response['chat_settings']
                            title = chat_settings['title']
                        answer = function.registerGroup(peer_id=event.obj.peer_id, uname=title)
                        if answer == True:
                            text = '‚úÖ –í–∞—à–∞ –±–µ—Å–µ–¥–∞ –±—ã–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞.' \
                                   '\nüìú –°–ø—Ä–∞–≤–∫–∞: vk.com/@fktpm_ss-fktpm-bot' \
                                   '\nüì¢ –ï—Å–ª–∏ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ—Ç, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –≥—Ä—É–ø–ø—É. –¢–∞–∫ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–∑–Ω–∞–≤–∞—Ç—å –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–µ—Ä–≤—ã–º–∏ :)' \
                                   '\n‚ö† –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–º–∞–Ω–¥—ã –ø—Ä–æ–ø–∏—à–∏—Ç–µ "/help"'
                            last_id = vk.messages.edit(
                                peer_id=event.obj.peer_id,
                                message=text,
                                conversation_message_id=event.obj.conversation_message_id
                            )

                    elif event.object.payload.get('type') == 'shop_byer_prepod':
                        text = gaming_func.buy_item(peer_id=event.obj.user_id, need_money=250, item="–ü—Ä–µ–ø–æ–¥")
                        vk.messages.edit(
                            peer_id=event.obj.peer_id,
                            message=text,
                            conversation_message_id=event.obj.conversation_message_id
                        )
                    elif event.object.payload.get('type') == 'shop_byer_notebook':
                        text = gaming_func.buy_item(peer_id=event.obj.user_id, need_money=56, item="–¢–µ—Ç—Ä–∞–¥—å")
                        vk.messages.edit(
                            peer_id=event.obj.peer_id,
                            message=text,
                            conversation_message_id=event.obj.conversation_message_id
                        )
                    elif event.object.payload.get('type') == 'shop_byer_doshik':
                        text = gaming_func.buy_item(peer_id=event.obj.user_id, need_money=14, item="–î–æ—à–∏—Ä–∞–∫")
                        vk.messages.edit(
                            peer_id=event.obj.peer_id,
                            message=text,
                            conversation_message_id=event.obj.conversation_message_id
                        )
                    elif event.object.payload.get('type') == 'shop_byer_brain':
                        text = gaming_func.buy_item(peer_id=event.obj.user_id, need_money=9999999, item="–ú–æ–∑–≥")
                        vk.messages.edit(
                            peer_id=event.obj.peer_id,
                            message=text,
                            conversation_message_id=event.obj.conversation_message_id
                        )

                    elif event.object.payload.get('type') == 'lootbox_100':
                        text = gaming_func.lootGift(from_id=from_id, need_money=100)
                        vk.messages.edit(
                            peer_id=event.obj.peer_id,
                            message=text,
                            conversation_message_id=event.obj.conversation_message_id
                        )
                    elif event.object.payload.get('type') == 'lootbox_5000':
                        text = gaming_func.lootGift(from_id=from_id, need_money=5000)
                        vk.messages.edit(
                            peer_id=event.obj.peer_id,
                            message=text,
                            conversation_message_id=event.obj.conversation_message_id
                        )


                    elif event.object.payload.get('type') == 'Ruble':
                        sender(peer_id, '–° –≤–∞—Å –±–∞–±–∫–∏')
                    elif event.object.payload.get('type') == 'StudCoin':
                        sender(peer_id, '–•–æ—Ä–æ—à–æ!')
                except:
                    sender(2000000009, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–æ–∫')
    #–ù–∞ —Å–ª—É—á–∞–π –ø–∞–¥–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤
    except (requests.exceptions.ConnectionError, TimeoutError, requests.exceptions.Timeout,
        requests.exceptions.ConnectTimeout, requests.exceptions.ReadTimeout):
        def recon():
            print("\n----> –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è <----\n")
            try:
                start()
                print("<---> –£—Å–ø–µ—à–Ω–æ! <--->")
            except:
                print("<---! –ù–µ —É–¥–∞—á–Ω–æ !--->")
                recon()
        print("\n----- –ü–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏ –í–ö -----\n")
        import time
        time.sleep(60)
        recon()


def callVK(ch, method, props, body):
    message = body.decode()
    sender(peer_id=2000000001, message=message)



def loop_b():
    while True:
        now = datetime.now().strftime("%y-%m-%d %H:%M:%S")
        try:
            (id_chat, ntc) = function.getNotice(timeline=now)
            #out = ''.join([f'{id_chat} - {notic}'] for id_chat, notic in text)
            sender(id_chat, f'üîî –í—ã –ø—Ä–æ—Å–∏–ª–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç—å: {ntc}')
            function.delNotice(id_chat=id_chat, notice=ntc)
        except:
            pass

        try:
            connection = pika.BlockingConnection()
            channel = connection.channel()

            channel.exchange_declare(exchange='telegram_msg', exchange_type='fanout')

            result = channel.queue_declare(queue='', exclusive=True)
            queue_name = result.method.queue

            channel.queue_bind(exchange='telegram_msg', queue=queue_name)
            channel.basic_consume(
                queue=queue_name, on_message_callback=callVK, auto_ack=True)

            #channel.queue_declare(queue='VK_queue')
            #channel.basic_consume(queue='VK_queue', on_message_callback=callbackVK)

            channel.start_consuming()
        except:
            pass
        import time
        time.sleep(1)

# def listen(longpoll, admin, chat: str):
#     for e in longpoll.listen():
#         if e.type == VkBotEventType.MESSAGE_NEW:
#             spy_message = e.object.message['text']
#             sender(admin, spy_message)
#
#             if function.check_adm(peer_id=admin, lvl=100) == True:
#                 if spy_message == '/cancel':
#                     sender(chat, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∫–∏–Ω—É–ª–∞ –≤–∞—à —á–∞—Ç.')
#                     Process(target=listen).close()

def start():
    Process(target=loop_a).start()
    Process(target=loop_b).start()

if __name__ == '__main__':
    # Process(target=loop_a).start()
    # Process(target=loop_b).start()
    Process(target=bot).start()